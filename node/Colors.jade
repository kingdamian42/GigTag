doctype html
html(lang="en")
  head
    title='#' + tag
    script(src="/socket.io/socket.io.js")
    script(src="http://code.jquery.com/jquery-1.11.0.min.js")
    link(rel="stylesheet" type="text/css" href="/public/style.css")
    link(href="//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css" rel="stylesheet")
  body
    div(class="center")
      h1.
        ##{tag}
      br
      br
      br
      div(id='tweet')

    script(type='text/javascript').

      $( document ).ready(function() {
        var socket = io.connect();
        socket.emit('create','#{tag}'.toLowerCase());
        socket.on('moderatedTweet', function (data) {
          $('#tweet').text("@" + data.user + ": " + data.text);
        });
      });

      var rand_color = Math.floor(Math.random() * 16777215).toString(16);
      changeColor(0);
      // success callback when requesting audio input stream
      if (! window.AudioContext) {
        if (! window.webkitAudioContext) {
            alert('no audiocontext found');
        }
        window.AudioContext = window.webkitAudioContext;
      }

      function changeColor(offset){
        bg_color = "#" + (rand_color + Math.round((offset/7)));
        document.bgColor = bg_color;
        //console.log(bg_color);
        //console.log("r " + rand_color);
      }

      var context = new AudioContext();
      var audioBuffer;
      var sourceNode;

      // load the sound
      setupAudioNodes();
      loadSound("/public/wagner.mp3");

      function setupAudioNodes() {
          // setup a javascript node
          javascriptNode = context.createScriptProcessor(2048, 1, 1);
          // connect to destination, else it isn't called
          javascriptNode.connect(context.destination);

          // setup a analyzer
          analyser = context.createAnalyser();
          analyser.smoothingTimeConstant = 0.3;
          analyser.fftSize = 1024;

          // create a buffer source node
          sourceNode = context.createBufferSource();

          // connect the source to the analyser
          sourceNode.connect(analyser);

          // we use the javascript node to draw at a specific interval.
          analyser.connect(javascriptNode);

          // and connect to destination, if you want audio
         sourceNode.connect(context.destination);
      }

      javascriptNode.onaudioprocess = function() {

        // get the average, bincount is fftsize / 2
        var array =  new Uint8Array(analyser.frequencyBinCount);
        analyser.getByteFrequencyData(array);
        var average = getAverageVolume(array)

        //console.log(average);
        changeColor(average);
      }

      function getAverageVolume(array) {
          var values = 0;
          var average;

          var length = array.length;

          // get all the frequency amplitudes
          for (var i = 0; i < length; i++) {
              values += array[i];
          }

          average = values / length;
          return average;
      }

      // load the specified sound
      function loadSound(url) {
          var request = new XMLHttpRequest();
          request.open('GET', url, true);
          request.responseType = 'arraybuffer';

          // When loaded decode the data
          request.onload = function() {

              // decode the data
              context.decodeAudioData(request.response, function(buffer) {
                  // when the audio is decoded play the sound
                  playSound(buffer);
              }, onError);
          }
          request.send();
      }


      function playSound(buffer) {
          sourceNode.buffer = buffer;
          sourceNode.start(0);
      }

      // log if an error occurs
      function onError(e) {
          console.log(e);
      }
